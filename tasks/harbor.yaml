version: '3'

vars:
  REDIS_CHART_OCI_URL: registry-1.docker.io/bitnamicharts/keydb
  REDIS_CHART_VERSION:
    sh: crane ls '{{.REDIS_CHART_OCI_URL}}' --omit-digest-tags | sort -rV | head -n1
  REDIS_VALUES_FILE: "{{.GIT_REPO_ROOT}}/helm-values/keydb.yaml"

  HARBOR_DATABASE_VALUES_FILE: "{{.GIT_REPO_ROOT}}/helm-values/harbor-database.yaml"
  CLOUDNATIVEPG_CLUSTER_CHART_EXTRA_IMAGES_FILE: "{{.GIT_REPO_ROOT}}/helm-values/harbor-database-extra-images.txt"

  HARBOR_CHART_REPO: https://helm.goharbor.io
  HARBOR_CHART_VERSION:
    sh: |
      helm show chart --repo '{{.HARBOR_CHART_REPO}}' harbor | \
        gojq --yaml-input -r '.version'
  HARBOR_VALUES_TEMPLATE_FILE: "{{.GIT_REPO_ROOT}}/helm-values/harbor.yaml.tmpl"

tasks:
  create-ca:
    run: once
    cmds:
      - cmd: |
          envsubst -i '{{.GIT_REPO_ROOT}}/manifests/harbor/cert-issuer.yaml.tmpl' | \
            kubectl apply --server-side -f -
    status:
      - kubectl get issuer -n '{{.REGISTRY_NAMESPACE}}' harbor-ca-issuer

  create-redis-cluster:
    deps:
      - create-ca
    cmds:
      - cmd: |
          helm upgrade --install harbor-keydb 'oci://{{.REDIS_CHART_OCI_URL}}' \
            --version '{{.REDIS_CHART_VERSION}}' \
            --values '{{.REDIS_VALUES_FILE}}' \
            --namespace '{{.REGISTRY_NAMESPACE}}' \
            --create-namespace \
            --wait --wait-for-jobs
    status:
      - |
        helm get metadata --namespace '{{.REGISTRY_NAMESPACE}}' harbor-keydb --output json | \
          gojq -e '.version == "{{.REDIS_CHART_VERSION}}" and .status == "deployed"'

  create-postgresql-cluster:
    deps:
      - create-ca
    cmds:
      - cmd: |
          helm upgrade --install harbor-database cluster \
            --repo '{{.CLOUDNATIVEPG_CHART_REPO}}' \
            --version '{{.CLOUDNATIVEPG_CLUSTER_CHART_VERSION}}' \
            --namespace '{{.REGISTRY_NAMESPACE}}' \
            --create-namespace \
            --wait --wait-for-jobs \
            --values '{{.HARBOR_DATABASE_VALUES_FILE}}'
      - cmd: |
          kubectl wait cluster --namespace '{{.REGISTRY_NAMESPACE}}' harbor-database-cluster \
            --for=condition=Ready --timeout 10m
    status:
      - |
        kubectl wait cluster --namespace '{{.REGISTRY_NAMESPACE}}' harbor-database-cluster \
          --for=condition=Ready  --timeout 10m

  deploy:
    deps:
      - create-ca
    vars:
      HARBOR_VALUES_TEMP:
        sh: mktemp --tmpdir harbor-values-XXXXXXXX.yaml
    env:
      HARBOR_REDIS_PASSWORD:
        sh: |
          kubectl --kubeconfig='{{.KUBECONFIG}}' \
            get secrets -n ncr-system harbor-keydb -ojson | \
              gojq -r '.data["keydb-password"] | @base64d'
      HARBOR_EXTERNAL_IP:
        sh: |
          kubectl --kubeconfig='{{.KUBECONFIG}}' \
            get ipaddresspools -n metallb-system default -ojson | \
              gojq -r '.spec.addresses[0] | scan("^(?:\\d+\\.){3}\\d+")'
    cmds:
      - cmd: envsubst -i '{{.HARBOR_VALUES_TEMPLATE_FILE}}' -o '{{.HARBOR_VALUES_TEMP}}'
      - defer: rm -f '{{.HARBOR_VALUES_TEMP}}'
      - cmd: |
          helm upgrade --install harbor harbor \
            --repo '{{.HARBOR_CHART_REPO}}' \
            --version '{{.HARBOR_CHART_VERSION}}' \
            --namespace '{{.REGISTRY_NAMESPACE}}' \
            --create-namespace \
            --wait --wait-for-jobs \
            --values '{{.HARBOR_VALUES_TEMP}}'
    status:
      - |
        helm get metadata --namespace '{{.REGISTRY_NAMESPACE}}' harbor --output json | \
          gojq -e '.version == "{{.HARBOR_CHART_VERSION}}" and .status == "deployed"'

  seed:
    vars:
      HARBOR_ADMIN_PASSWORD:
        sh: |
          kubectl --kubeconfig='{{.KUBECONFIG}}' \
            get secrets -n ncr-system harbor-core -ojson | \
              gojq -r '.data["HARBOR_ADMIN_PASSWORD"] | @base64d'
    cmds:
      - cmd: |
          kubectl exec -n ncr-system temporary-registry registry -- \
            mindthegap push bundle --bundle /registry-data/bundle.tar \
                                   --to-registry http://harbor:80/library \
                                   --to-registry-username admin \
                                   --to-registry-password '{{.HARBOR_ADMIN_PASSWORD}}'

  switch-to-harbor:
    cmds:
      - cmd: |
          kubectl patch -n ncr-system service ncr \
            --type='merge' \
            -p '{"spec":{"selector":{"app": "harbor", "component": "nginx"}}}'
