version: '3'

vars:
  BOOTSTRAP_REGISTRY_DIR: "{{.GIT_REPO_ROOT}}/bootstrap-registry"
  BOOTSTRAP_REGISTRY_IMAGES_FILE: "{{.BOOTSTRAP_REGISTRY_DIR}}/bootstrap-images.txt"
  BOOTSTRAP_REGISTRY_IMAGES_BUNDLE: "{{.BOOTSTRAP_REGISTRY_DIR}}/bootstrap-images.tar"

tasks:
  create-namespace:
    cmds:
      - cmd: kubectl create namespace '{{.REGISTRY_NAMESPACE}}'
    status:
      - kubectl get namespace '{{.REGISTRY_NAMESPACE}}'

  create-bootstrap-image-bundle:
    cmds:
      - cmd: helm list-images --repo '{{.CLOUDNATIVEPG_CHART_REPO}}' cloudnative-pg --chart-version='{{.CLOUDNATIVEPG_VERSION}}' >'{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
      - cmd: |
          helm list-images '{{.VALKEY_CHART_OCI_URL}}' --chart-version='{{.VALKEY_VERSION}}-chart' \
            --values '{{.VALKEY_VALUES_FILE}}' >>'{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
      - cmd: helm list-images --repo '{{.CERTMANAGER_CHART_REPO}}' cert-manager --chart-version='{{.CERTMANAGER_VERSION}}' >>'{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
      - cmd: |
          helm list-images --repo '{{.S3GW_CHART_REPO}}' s3gw --chart-version='{{.S3GW_VERSION}}' \
            --values '{{.S3GW_VALUES_FILE}}' >>'{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
      - cmd: |
          kustomize build '{{.COSI_STORAGE_CONTROLLER_KUSTOMIZE_URL}}' | \
            gojq --yaml-input -r 'select(.kind == "Deployment").spec.template.spec.containers[].image' >>'{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
      - cmd: |
          docker container run -v "$(dirname '{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'):/tmp/bootstrap-images" \
            --user "$(id -u):0" \
            ghcr.io/mesosphere/mindthegap:"{{.LATEST_MINDTHEGAP_VERSION}}" \
            create bundle --images-file=/tmp/bootstrap-images/"$(basename '{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}')" \
            --output-file=/tmp/bootstrap-images/"$(basename '{{.BOOTSTRAP_REGISTRY_IMAGES_BUNDLE}}')" \
            --image-pull-concurrency=20 \
            --overwrite
    sources:
      - '{{.BOOTSTRAP_REGISTRY_IMAGES_FILE}}'
    generates:
      - '{{.BOOTSTRAP_REGISTRY_IMAGES_BUNDLE}}'

  deploy-bootstrap-registry:
    vars:
      BOOTSTRAP_REGISTRY_POD_MANIFEST: "{{.GIT_REPO_ROOT}}/bootstrap-registry/bootstrap-registry.yaml"
    env:
      LATEST_MINDTHEGAP_VERSION: "{{.LATEST_MINDTHEGAP_VERSION}}"
    cmds:
      - task: create-namespace
      - cmd: envsubst -i '{{.BOOTSTRAP_REGISTRY_POD_MANIFEST}}.tmpl' -o '{{.BOOTSTRAP_REGISTRY_POD_MANIFEST}}'
      - defer: rm -f '{{.BOOTSTRAP_REGISTRY_POD_MANIFEST}}'
      - cmd: kubectl apply --server-side --namespace='{{.REGISTRY_NAMESPACE}}' -f '{{.BOOTSTRAP_REGISTRY_POD_MANIFEST}}'
      - cmd: kubectl wait --for=condition=Ready pod --namespace='{{.REGISTRY_NAMESPACE}}' -l app=in-cluster-registry,role=bootstrap --timeout=5m
    status:
      - kubectl get pod --namespace='{{.REGISTRY_NAMESPACE}}' -l app=in-cluster-registry,role=bootstrap | grep -q 'Running'
